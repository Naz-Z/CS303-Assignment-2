#ifndef SINGLELINKEDLIST_H
#define SINGLELINKEDLIST_H

#include <iostream>
#include <stdexcept>

template<typename Item_Type>
class SingleLinkedList {
private:
    struct Node {
        Item_Type data;
        Node* next;
        Node(const Item_Type& data_item, Node* next_ptr = nullptr);
    };

    Node* head;
    Node* tail;
    size_t num_items;

public:
    SingleLinkedList();
    ~SingleLinkedList();

    void push_front(const Item_Type& item);
    void push_back(const Item_Type& item);
    void pop_front();
    void pop_back();
    Item_Type front() const;
    Item_Type back() const;
    bool empty() const;
    void insert(size_t index, const Item_Type& item);
    bool remove(size_t index);
    size_t find(const Item_Type& item) const;
    size_t size() const;
};

#include "SingleLinkedList.tpp"

#endif // SINGLELINKEDLIST_H
